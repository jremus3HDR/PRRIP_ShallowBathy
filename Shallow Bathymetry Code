#Import Libaries
import arcpy
import pandas as pd
pd.options.mode.chained_assignment = None 
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import numpy as np
from IPython.display import display
import math
import os

#Setup
GS_Pts = 'P2P_All_KnownBath'
#Parts 1-22
#Add desired parts to list, use single quotes
pt_feature_names = ['UnknownPts_Part_22']
pt_features =[]
for pt_feature_name in pt_feature_names:
    pt_features.append(os.path.join(r'N:\PRRIP\10385277_Lower_Platte_River_2D\Spatial\gdb',
                          f'{pt_feature_name[11:]}.gdb',
                          pt_feature_name))
sr = arcpy.Describe(pt_features[0]).spatialReference
arcpy.env.outputCoordinateSystem = sr
"""
Curve fit types: Input one of these in the eq variable
Linear
Exponential
Power
"""
eq = 'Linear' #always linear after testing phase
average_sample = 'Y'
write_plots = 'Y'
pdf_out = fr'N:\PRRIP\10385277_Lower_Platte_River_2D\Plot\Draft\Color_Depth_Plots\UnknownPts_22_Null.pdf' #location of output PDF of plots if desired
#print controlvariable status
print(f"""Current Settings
Feature: {pt_features}
Equation: {eq}
Writing Plots: {write_plots}""")

#Interpolation Routing ...FOR PLOTS ONLY... used if write plots is selected and does not affect the computed depths.
def InterpRouting(eq,polyline,m,b):
    #print(eq)
    if eq == 'Linear':
        y_vals_2 = LinInterp(polyline,m,b)
    elif eq == 'Exponential':
        y_vals_2 = ExpInterp(polyline,m,b)
        #print(y_vals_2)
    elif eq == 'Power':
        y_vals_2 = PInterp(polyline,m,b)
    return y_vals_2  

#Linear Functions
def Linfun(x_data,y_data,val):
    model,r2,r2_old,flags = adjR(x_data,y_data, 1)
    try:
        m = model.coef[0]
        b =model.coef[1]
    except: #if the reurned model is a flat line there will only be one variable, y-intercept
        m = 0
        b = model[0]
    depth = m*val+b
    return model,r2,r2_old,m,b,depth,flags

def LinInterp(line,m,b): #used for plots no depth calcs
    y_vals = m*line+b
    #print (y_vals)
    return y_vals

#Exponential Functions --> Depreciated, the follow functions were not selected for final runs
def Expfun(x_data,y_data,val):
    model,r2,r2_old = adjR(x_data,y_data, 1)
    m = model.coef[0]
    b = math.exp(model.coef[1])
    depth = b*math.exp(m*val)
    return model,r2,r2_old,m,b,depth

def ExpInterp(line,m,b): #used for plots no depth calcs
    y_vals = b*np.exp(m*line)
    #print (y_vals)
    return y_vals

#Power Functions --> Depreciated, the follow functions were not selected for final runs
def Pfun(x_data,y_data,val):
    model,r2,r2_old = adjR(x_data,y_data, 1)
    m = model.coef[0]
    b = math.exp(model.coef[1])
    depth = b*val**m
    return model,r2,r2_old,m,b,depth

def PInterp(line,m,b): #used for plots no depth calcs
    y_vals = b*np.power(line,m)
    return y_vals

#Calcualte r2 This function computes the curve fit variables and computes r2
#r2 old is an adjusted r2, originaly before the sample points were average it was though that this would counter act the tendency of r2 to increase with the addition of unrelated points
#after averaging of sample points we changed to the standard r2 equation
def adjR(x, y, degree):
    flag_row = False #flag row is a variable to help idenitfy point that are causing problems with the math
    coeffs = np.polyfit(x, y, degree)
    p = np.poly1d(coeffs)
    yhat = p(x)
    ybar = np.sum(y)/len(y)
    ssreg = np.sum((yhat-ybar)**2)
    sstot = np.sum((y - ybar)**2)        
    if len(y) == 1: #if there is only 1 point in sample set r2 = 0. No relationship can be gleanded from only 1 sample
        r2 = 0
        r2_old = 0
    else:
        if len(y) ==2:
            r2_old = 1
        else:
            if len(pd.unique(y)) == 1: #if there is only 1 unique value Line is completely flat sstot =0 will result in error
                r2_old = 1
                flag_row = True
            else: #if none of the caveots are found calculate adjusted r2
                r2_old = 1- (((1-(ssreg/sstot))*(len(y)-1))/(len(y)-degree-1)) #Adjusted R2
        if len(pd.unique(y)) == 1: #unlike having only 1 y value we can have multiple x values with the same y value with results in a flat line
            print('Only 1 Unique Line Value, Flat Line')
            flag_row = True
            r2 = 1
        else: #if none of the caveots are found calculate r2
            r2 = 1-(np.sum((y-yhat)**2)/sstot)
        #print(r2)

    return p,r2,r2_old,flag_row

#Addjust Extents, used to search for sample known points for the selected unknown point
def extents(X,Y,offset,df):
    lboundX = X - offset
    uboundX = X + offset
    lboundY = Y - offset
    uboundY = Y + offset
    df_filtered = df.query('X >= @lboundX and X <= @uboundX and Y >= @lboundY and Y <= @uboundY')
    #display(df_filtered)
    return df_filtered

#Main program
st = datetime.datetime.now()
start_time_formatted = st.strftime('%D, %H:%M:%S')
print(f'Start Time: {start_time_formatted}')

for pt_feature in pt_features:
    ct = datetime.datetime.now() #current time
    rt = ct-st #current runtime
    print(f'Starting: {os.path.basename(pt_feature)}, Runtime: {str(rt)}')
    print('')
    extent = arcpy.Describe(pt_feature).extent
    XMin,XMax,YMin,YMax = extent.XMin-1000,extent.XMax+1000,extent.YMin-1000,extent.YMax+1000
    np_arr = arcpy.da.FeatureClassToNumPyArray (GS_Pts, ['SHAPE@X','SHAPE@Y','Depth','R','G','B'])
    ref_pts_all = pd.DataFrame(np_arr)
    ref_pts_all = ref_pts_all.rename(columns={'SHAPE@X': 'X', 'SHAPE@Y': 'Y'})
    ref_pts_all.query('X >= @XMin and X <= @XMax and Y >= @YMin and Y <= @YMax', inplace = True)
    ref_pts_all.loc[:,'color_sum'] = ref_pts_all.apply(lambda row: row['B']+row['R']+row['G'],axis=1)
    ref_pts_all.query('color_sum >0',inplace = True)
    
    print(len(ref_pts_all))
    #display(ref_pts_all)

    fields = ['OID@','SHAPE@X','SHAPE@Y']
    fields_new = [field.name for field in arcpy.ListFields(pt_feature)]
    fields = fields + fields_new[3:]
    print(fields)
    #find Indexes of Color Groupings
    R1_index = fields.index('Ratio_B_R') # Ratio B/R
    R2_index = fields.index('Ratio_G_R') # Ratio G/R
    R4_index = fields.index('Ratio_AvgBG_R') # Ratio AVG(B,G)/R

    ratios = [['Ratio_B_R',R1_index],['Ratio_G_R',R2_index],['Ratio_AvgBG_R',R4_index]]
    #colors = [['R','R_In'],['G','G_In'],['B','B_In']]#['Gy','Gy_In']]

    whereclause = "OBJECTID=684023"
    #whereclause = "OBJECTID >= 378000 AND OBJECTID <= 383000 AND MOD(OBJECTID,100) = 0"
    #whereclause = "OBJECTID >= 684000 AND OBJECTID <= 685000"
    #whereclause = "MOD(OBJECTID,100) = 0"
    with PdfPages(pdf_out) as pdf:
        with arcpy.da.UpdateCursor(pt_feature,fields,where_clause = whereclause) as cursor:
            for row in cursor:
                models = []
                r2s=[]
                ms = []
                bs = []
                #print(f'Point: {row[0]}')
                i_offset = 10 #Initial offset
                multiplier = 0 #multiplier for additional offset search
                n_vals = 0 #numver of values in filtered array
                while n_vals <= 24:
                    #print(f'values in Array: {n_vals}, Mulitplier: {multiplier}')
                    offset = 3*multiplier + i_offset
                    pts = extents(row[fields.index('SHAPE@X')],
                                      row[fields.index('SHAPE@Y')],offset,ref_pts_all)
                    n_vals = len(pts)
                    multiplier += 1
                #print(f'values in Array: {n_vals}, Mulitplier: {multiplier}')
                if row[0]%1000 == 0 or row[0] ==0:
                    ct = datetime.datetime.now() #current time
                    rt = ct-st #current runtime
                    print(f'Point: {row[0]}, Runtime: {str(rt)}')
                    print('')
                    print(f'values in Array: {n_vals}, Mulitplier: {multiplier}')
                pts.loc[:,'Ratio_B_R'] = pts.apply(lambda row: round(row['B']/row['R'],2),axis=1)
                pts.loc[:,'Ratio_G_R']=round(pts.loc[:,'G']/pts.loc[:,'R'],2)
                pts.loc[:,'Ratio_AvgBG_R']=round(((pts.loc[:,'B']+pts.loc[:,'G'])/2)/pts.loc[:,'R'],2)
                for ratio,index in ratios:
                    flag_row = False
                    if average_sample == 'Y':
                        pts_sample = pts.groupby(pts[ratio]).mean()
                    else:
                        pts_sample= pts
                        pts_sample.set_index(ratio,drop = False,inplace = True)
                    ratio_val = round(row[index],2) #analysis point ratio value rounded
                    if eq == 'Linear':
                        x_data = pts_sample.index
                        y_data = pts_sample.Depth
                        model,r2,r2_old,m,b,depth,flag_row = Linfun(x_data,y_data.values,ratio_val)
                    elif eq == 'Exponential':
                        x_data = pts_sample.index
                        y_data = np.log(pts_sample.Depth)
                        model,r2,r2_old,m,b,depth = Expfun(x_data,y_data.values,ratio_val)
                    elif eq == 'Power':
                        x_data = np.log(pts_sample.index)
                        y_data = np.log(pts_sample.Depth)
                        model,r2,r2_old,m,b,depth = Pfun(x_data,y_data.values,ratio_val)
                    if flag_row == True:
                        print(f'Warning in Point: {row[0]}, {ratio}')
                    models.append(model)
                    r2s.append(r2)
                    ms.append(m)
                    bs.append(b)
                    #m = model.coef[0]
                    #b = model.coef[1]
                    #depth = m*row[index]+b
                    row[index+1] = m #slope
                    row[index+2] = b #Y intercept
                    row[index+3] = r2 #R2
                    row[fields.index(f'{ratio}_r2_old')] = r2_old
                    row[index+6] = depth #Depth
                    #Check to see if it is in the depth range
                    if  depth < pts.Depth.min() or depth > pts.Depth.max():
                        row[index+5] = 'N'
                    else:
                        row[index+5] = 'Y'
                    #Check to see if it is in the ratio range
                    if  ratio_val < pts[ratio].min() or ratio_val > pts[ratio].max():
                        row[index+4] = 'N'
                    else:
                        row[index+4] = 'Y'
                cursor.updateRow(row)

                #Kick out plots
                if row[0]%100==0 and write_plots == 'Y':
                    %matplotlib inline
                    #Unaveraged Line
                    polyline = np.linspace(pts['Ratio_G_R'].min()-0.25, pts['Ratio_G_R'].max()+0.25)
                    plt.scatter(pts['Ratio_B_R'], pts.Depth,color = 'Blue')
                    plt.plot(polyline, InterpRouting(eq,polyline,ms[0],bs[0]), color='Blue', label=f'Ratio B/R r\u00b2: {round(r2s[0],3)}')
                    #plt.plot(polyline, models[0](polyline), color='Blue', label=f'Ratio B/R r\u00b2: {round(r2s[0],3)}')
                    plt.scatter(pts['Ratio_G_R'], pts.Depth,color = 'Green')
                    plt.plot(polyline, InterpRouting(eq,polyline,ms[1],bs[1]), color='Green', label=f'Ratio G/R r\u00b2: {round(r2s[1],3)}')
                    #plt.plot(polyline, models[1](polyline), color='Green', label=f'Ratio G/R r\u00b2: {round(r2s[1],3)}')
                    plt.scatter(pts['Ratio_AvgBG_R'], pts.Depth,color = 'Red')
                    plt.plot(polyline, InterpRouting(eq,polyline,ms[2],bs[2]), color='Red', label=f'Ratio AVG(B,G)/R r\u00b2: {round(r2s[2],3)}')
                    #plt.plot(polyline, models[2](polyline), color='Red', label=f'Ratio AVG(B,G)/R r\u00b2: {round(r2s[2],3)}')
                    plt.xlabel("Color Ratio")
                    plt.ylabel(r"Depth (ft)")
                    plt.legend(loc='upper left')
                    plt.ylim(0,pts.Depth.min()+0.5)
                    plt.title(f'Point {row[0]}: Unaveraged Neighbor Points')
                    pdf.savefig()
                    plt.close()

            print('')
    
    ct = datetime.datetime.now() #current time
    rt = ct-st #current runtime
    print(f'Finishing: {os.path.basename(pt_feature)}, Runtime: {str(rt)}')
    print('')
    
ct = datetime.datetime.now()
rt = ct-st
print(f'Runtime: {str(rt)}')
print('Done')
